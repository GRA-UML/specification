import GRAcommon;
import NIEMmpdartifact2model;

modeltype XSD  uses 'http://www.eclipse.org/xsd/2002/XSD';
modeltype SPPCAT  uses 'http://gra.ijis.org/catalog/1.0.0';
modeltype METADATA  uses 'http://it.ojp.gov/gsp/services/1.0.0';
modeltype XMLDSIG uses 'http://www.w3.org/2000/09/xmldsig#';// this is used
modeltype WSDL uses 'http://www.eclipse.org/wsdl/2003/WSDL';// TODO: change to http://schemas.xmlsoap.org/wsdl/
modeltype CMOF  uses 'http://www.eclipse.org/emf/2002/Ecore';
modeltype SOAP uses 'http://www.eclipse.org/wsdl/2003/SOAP';

transformation GraSppCompare(in cat:SPPCAT,in catTarget:SPPCAT);
	main() {
	var documentRoot:SPPCAT::DocumentRoot = cat.rootObjects()
            ->select(r|r.oclIsKindOf(SPPCAT::DocumentRoot)).oclAsType(SPPCAT::DocumentRoot)
            ->asSequence()->first();
		// input catalogs serve to identify one or more schemas, we get transitive closure of each
	var sppCatalog:SPPCAT::CatalogType1:=documentRoot.catalog->asSequence()->first();
	var targetdocumentRoot:SPPCAT::DocumentRoot = catTarget.rootObjects()
            ->select(r|r.oclIsKindOf(SPPCAT::DocumentRoot)).oclAsType(SPPCAT::DocumentRoot)
            ->asSequence()->first();
		// input catalogs serve to identify one or more schemas, we get transitive closure of each
	var targetsppCatalog:SPPCAT::CatalogType1=targetdocumentRoot.catalog->asSequence()->first();
	var metadata:SPPCAT::MetadataType=sppCatalog.metadata;
	var targetmetadata:SPPCAT::MetadataType=targetsppCatalog.metadata;
	
	var wsdlSchemaType:OrderedSet(SPPCAT::WsdlSchemaType)=sppCatalog.wsdlSchema;
	var wsdls:OrderedSet(WSDL::Definition)=OrderedSet{};
	wsdlSchemaType->forEach(wsdlType){
		wsdls+=wsdlType.oclAsType(Stdlib::Element).getWsdlAtRelativeURI(wsdlType.href).oclAsType(WSDL::Definition);
	};	
	
	var targetwsdlSchemaType:OrderedSet(SPPCAT::WsdlSchemaType)=targetsppCatalog.wsdlSchema;
	var targetwsdls:OrderedSet(WSDL::Definition)=OrderedSet{};
	targetwsdlSchemaType->forEach(wsdlType){
		targetwsdls+=wsdlType.oclAsType(Stdlib::Element).getWsdlAtRelativeURI(wsdlType.href).oclAsType(WSDL::Definition);
	};	
	
		log('source wsdls: '+wsdls->size().repr()+', target wsdls: '+targetwsdls->size().repr());
		
		
		wsdls->forEach(schema){
			log('source wsdl '+schema.targetNamespace);
		};
		targetwsdls->forEach(schema){
			log('target schema '+schema.targetNamespace);
		};
		// check for non-matches
		wsdls->select(s|targetwsdls.targetNamespace->select(n|n=s.targetNamespace)->isEmpty())->forEach(originalSchema){
			log('no target schemas for original '+originalSchema.targetNamespace);
		};
		targetwsdls->select(s|wsdls.targetNamespace->select(n|n=s.targetNamespace)->isEmpty())->forEach(originalSchema){
			log('no original schemas for target '+originalSchema.targetNamespace);
		};
		// compare each wsdl
		wsdls->forEach(originalWsdl){
			targetwsdls->select(s|s.targetNamespace=originalWsdl.targetNamespace)->forEach(targetWsdl){
				originalWsdl.compare(targetWsdl);
			};
		};
	}
property IGNORE_IRRELEVANT_MISMATCH:Boolean=true;	
helper 	WSDL::Definition::compare(target:WSDL::Definition){
	log('compare schemas '+self.targetNamespace);
//	if(IGNORE_IRRELEVANT_MISMATCH)then{}else{
	// does not matter 
//		self.attributeFormDefault.compare(target.attributeFormDefault);
	// does not matter 
//		self.elementFormDefault.compare(target.elementFormDefault);
//	}endif;
	if(self.encoding<>target.encoding)then{
		log('ERROR: encoding mismatch '+self.encoding+' ? '+target.encoding);
	}else{}endif;
	if(self.qName<>target.qName)then{
		log('ERROR: qName mismatch '+self.qName.repr()+' ? '+target.qName.repr());
	}else{}endif;
	
	// contents: for each entry find matching
	// check for mismatches
	self.compareExtensibleElement(self.eServices,target.eServices);
	self.compareExtensibleElement(self.eBindings,target.eBindings);
	self.compareExtensibleElement(self.ePortTypes,target.ePortTypes);
	self.compareExtensibleElement(self.eMessages,target.eMessages);
	self.compareExtensibleElement(self.eTypes,target.eTypes);
	self.compareExtensibleElement(self.eImports,target.eImports);
	self.compareExtensibleElement(self.eNamespaces,target.eNamespaces);
	self.compareExtensibilityElement(self.eExtensibilityElements,target.eExtensibilityElements);
	self.compareWsdlElement(self.documentationElement,target.documentationElement);
	
}
helper 	WSDL::WSDLElement::compareWsdlElement(originalContent:OclAny,targetContent:OclAny){
	switch{
		case(originalContent=targetContent){
			
		};
		case((targetContent=null)or targetContent.oclIsUndefined()){
			log('ERROR: failed to match wsdl source DocumentationElement '+originalContent.oclAsType(CMOF::EObject).eClass().name+' '+originalContent.getQualifiedName());
		};
		case((originalContent=null)or originalContent.oclIsUndefined()){
			log('ERROR: failed to match wsdl target DocumentationElement '+targetContent.oclAsType(CMOF::EObject).eClass().name+' '+targetContent.getQualifiedName());
		};
		else{
				originalContent.compare(targetContent);
		};
	};
	return;
}
	
helper 	WSDL::ExtensibleElement::compareExtensibilityElement(sources:OrderedSet(WSDL::ExtensibilityElement),targets:OrderedSet(WSDL::ExtensibilityElement)){
	sources->forEach(baseElement){
		var targetElement:WSDL::ExtensibilityElement=baseElement.findMatch(targets);
		if(((targetElement=null)or targetElement.oclIsUndefined())and  not(baseElement.isSourceIgnored()))then{
			log('ERROR: failed to match wsdl source ExtensibilityElement '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	targets->forEach(baseElement){
		var targetElement:WSDL::ExtensibilityElement=baseElement.findMatch(sources);
		if(((targetElement=null)or targetElement.oclIsUndefined())and not(baseElement.isTargetIgnored()))then{
			log('ERROR: failed to match wsdl target  '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	sources->forEach(originalContent){
		var targetContent:WSDL::ExtensibilityElement=originalContent.findMatch(targets);
		if(((targetContent=null)or targetContent.oclIsUndefined()))then{}else{
				originalContent.compare(targetContent);
		}endif;
	};
}
helper 	WSDL::ExtensibleElement::compareExtensibleElement(sources:OrderedSet(WSDL::Namespace),targets:OrderedSet(WSDL::Namespace)){
	sources->forEach(baseElement){
		var targetElement:WSDL::Namespace=baseElement.findMatch(targets);
		if(((targetElement=null)or targetElement.oclIsUndefined())and  not(baseElement.isSourceIgnored()))then{
			log('ERROR: failed to match wsdl source namespace '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	targets->forEach(baseElement){
		var targetElement:WSDL::Namespace=baseElement.findMatch(sources);
		if(((targetElement=null)or targetElement.oclIsUndefined())and not(baseElement.isTargetIgnored()))then{
			log('ERROR: failed to match wsdl target  '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	sources->forEach(originalContent){
		var targetContent:WSDL::Namespace=originalContent.findMatch(targets);
		if(((targetContent=null)or targetContent.oclIsUndefined()))then{}else{
				originalContent.compare(targetContent);
		}endif;
	};
}
	
helper 	WSDL::ExtensibleElement::compareExtensibleElement(source:WSDL::Types,target:WSDL::Types){
	// TODO
	source.compareExtensibleElement(source.getWsdlSchemas(),target.getWsdlSchemas());
	source.compareExtensibilityElement(source.eExtensibilityElements,target.eExtensibilityElements);
	source.compareWsdlElement(source.documentationElement,target.documentationElement);
}
helper 	WSDL::ExtensibleElement::compareExtensibleElement(sources:Sequence(XSD::XSDSchema),targets:Sequence(XSD::XSDSchema)){
	// TODO
}	
helper 	WSDL::ExtensibleElement::compareExtensibleElement(sources:OrderedSet(WSDL::ExtensibleElement),targets:OrderedSet(WSDL::ExtensibleElement)){
	// contents: for each entry find matching
	// check for mismatches
	sources->forEach(baseElement){
		var targetElement:WSDL::ExtensibleElement=baseElement.findMatch(targets);
		if(((targetElement=null)or targetElement.oclIsUndefined())and  not(baseElement.isSourceIgnored()))then{
			log('ERROR: failed to match wsdl source  '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	targets->forEach(baseElement){
		var targetElement:WSDL::ExtensibleElement=baseElement.findMatch(sources);
		if(((targetElement=null)or targetElement.oclIsUndefined())and not(baseElement.isTargetIgnored()))then{
			log('ERROR: failed to match wsdl target  '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	sources->forEach(originalContent){
		var targetContent:WSDL::ExtensibleElement=originalContent.findMatch(targets);
		if(((targetContent=null)or targetContent.oclIsUndefined()))then{}else{
				originalContent.compare(targetContent);
		}endif;
	};
}
helper 	WSDL::ExtensibleElement::compareExtensibleElement(sources:OrderedSet(WSDL::Types),targets:OrderedSet(WSDL::Types)){
	// contents: for each entry find matching
	// check for mismatches
	sources->forEach(baseElement){
		var targetElement:WSDL::ExtensibleElement=baseElement.findMatch(targets);
		if(((targetElement=null)or targetElement.oclIsUndefined())and  not(baseElement.isSourceIgnored()))then{
			log('ERROR: failed to match wsdl source  '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	targets->forEach(baseElement){
		var targetElement:WSDL::ExtensibleElement=baseElement.findMatch(sources);
		if(((targetElement=null)or targetElement.oclIsUndefined())and not(baseElement.isTargetIgnored()))then{
			log('ERROR: failed to match wsdl target  '+baseElement.oclAsType(CMOF::EObject).eClass().name+' '+baseElement.getQualifiedName());
		}else{}endif;
	};
	sources->forEach(originalContent){
		var targetContent:WSDL::ExtensibleElement=originalContent.findMatch(targets);
		if(((targetContent=null)or targetContent.oclIsUndefined()))then{}else{
				originalContent.compare(targetContent);
		}endif;
	};
}



query WSDL::Namespace::findMatch(targets:OrderedSet(WSDL::Namespace)):WSDL::Namespace{
	var matches:Set(WSDL::Namespace)=targets
		->select(t|(t.URI=self.URI)and (t.prefix=self.prefix));
	if(matches->size()>1)then{
		log('ERROR: did not resolve match for namespace '+self.URI+', multiple matches: '+matches->size().repr());
	}else{}endif;
	return matches->asSequence()->first();
	
}
query WSDL::ExtensibilityElement::findMatch(targets:OrderedSet(WSDL::ExtensibilityElement)):WSDL::ExtensibilityElement{
	var matches:Set(WSDL::ExtensibilityElement)=targets
		->select(t|(t.oclAsType(CMOF::EObject).eClass()=self.oclAsType(CMOF::EObject).eClass())and(t.elementType=self.elementType));
		/*
	switch{
		case(self.oclIsKindOf(SOAP::SOAPAddress)){
			var qName:OclAny=self.oclAsType(WSDL::Service).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Service).qName=qName);
		};
		case(self.oclIsKindOf(SOAP::SOAPBinding)){
			var qName:OclAny=self.oclAsType(WSDL::Binding).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Binding).qName=qName);
		};
		case(self.oclIsKindOf(SOAP::SOAPBody)){
			var qName:OclAny=self.oclAsType(WSDL::PortType).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::PortType).qName=qName);
		};
		case(self.oclIsKindOf(SOAP::SOAPHeader)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
		case(self.oclIsKindOf(SOAP::SOAPHeaderBase)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
		case(self.oclIsKindOf(SOAP::SOAPHeaderFault)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
		case(self.oclIsKindOf(SOAP::SOAPOperation)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
		case(self.oclIsKindOf(WSDL::UnknownExtensibilityElement)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
		case(self.oclIsKindOf(WSDL::XSDSchemaExtensibilityElement)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
	};
	*/
	if(matches->size()>1)then{
		log('ERROR: did not resolve match for '+self.getQualifiedName()+', multiple matches: '+matches->size().repr());
	}else{}endif;
	return matches->asSequence()->first();
}

	
query WSDL::ExtensibleElement::findMatch(targets:OrderedSet(WSDL::ExtensibleElement)):WSDL::ExtensibleElement{
	var matches:Set(WSDL::ExtensibleElement)=Set{};
	switch{
		case(self.oclIsKindOf(WSDL::Service)){
			var qName:OclAny=self.oclAsType(WSDL::Service).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Service).qName=qName);
		};
		case(self.oclIsKindOf(WSDL::Binding)){
			var qName:OclAny=self.oclAsType(WSDL::Binding).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Binding).qName=qName);
		};
		case(self.oclIsKindOf(WSDL::PortType)){
			var qName:OclAny=self.oclAsType(WSDL::PortType).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::PortType).qName=qName);
		};
		case(self.oclIsKindOf(WSDL::Message)){
			var qName:OclAny=self.oclAsType(WSDL::Message).qName;
			matches:=targets->select(t|t.oclAsType(WSDL::Message).qName=qName);
		};
	};
	if(matches->size()>1)then{
		log('ERROR: did not resolve match for '+self.getQualifiedName()+', multiple matches: '+matches->size().repr());
	}else{}endif;
	return matches->asSequence()->first();
}

// as DOMElement	
query OclAny::findMatch(targets:OrderedSet(OclAny)):OclAny{
	// match by name and namespace; may need to look at attributes and/or text content as well
	var matches:OrderedSet(OclAny)=targets
		->select(t|
			(t.getElementName()=self.getElementName())
			and (t.getElementNamespace()=self.getElementNamespace())
		);
	if(matches->size()>1)then{
//		log('ERROR: did not resolve match for DOM node '+self.getElementNamespace()+' : '+self.getElementName()+', matches: '+matches->size().repr()+', context '+context.getQualifiedName());
		log('ERROR: did not resolve match for DOM node '+self.getElementNamespace()+' : '+self.getElementName()+', matches: '+matches->size().repr());
	}else{}endif;
	return matches->asSequence()->first();
}

query String::findMatch(targets:OrderedSet(String)):String{
	// match by type; then by name
	var matches:OrderedSet(String)=targets->select(t|t=self);
	if(matches->size()>1)then{
		log('ERROR: did not resolve match for String '+self.repr()+', matches: '+matches->size().repr());
	}else{}endif;
	return matches->asSequence()->first();
}

	
	
	
helper 	OclAny::compare(target:OclAny){
	if(self.getElementName()<>target.getElementName())then{
		log('ERROR: failed to match element name '+self.getElementName()+' ? '+target.getElementName());
	}else{}endif;
	if(self.getElementNamespace()<>target.getElementNamespace())then{
		log('ERROR: failed to match element namespace '+self.getElementNamespace()+' ? '+target.getElementNamespace());
	}else{}endif;
	if(IGNORE_IRRELEVANT_MISMATCH)then{}else{
//		if(self.getApplicationInformationBody().trim()<>target.getApplicationInformationBody().trim())then{
		if(self.getXSDElementValue().trim()<>target.getXSDElementValue().trim())then{
			log('ERROR: failed to match element body '+self.getXSDElementValue().trim()+' ? '+target.getXSDElementValue().trim());
		}else{}endif;
	}endif;	
	
//	self.getAttributes()->forEach(baseElement){
	self.getAttributes()->select(a|a.getAttrLocalName()!='xmlns')->forEach(baseElement){
		var targetElement:OclAny=baseElement.findMatch(target.getAttributes()->select(a|a.getAttrLocalName()!='xmlns')->asOrderedSet());
		if((targetElement=null)or targetElement.oclIsUndefined())then{
			log('ERROR: failed to match element source attributes '+baseElement.getAttrNamespaceURI()+' : '+baseElement.getAttrLocalName()+' = '+baseElement.getAttributeValue());
		}else{}endif;
	};
	target.getAttributes()->select(a|a.getAttrLocalName()!='xmlns')->forEach(baseElement){
		var targetElement:OclAny=baseElement.findMatch(self.getAttributes()->select(a|a.getAttrLocalName()!='xmlns')->asOrderedSet());
		if(((targetElement=null)or targetElement.oclIsUndefined()))then{
			// ok if default namespace
			log('ERROR: failed to match element target attributes '+baseElement.getAttrNamespaceURI()+' : '+baseElement.getAttrLocalName()+' = '+baseElement.getAttributeValue());
		}else{}endif;
	};
	self.getAttributes()->select(a|a.getAttrLocalName()!='xmlns')->forEach(originalContent){
		var targetContent:OclAny=originalContent.findMatch(target.getAttributes()->select(a|a.getAttrLocalName()!='xmlns')->asOrderedSet());
		if(((targetContent=null)or targetContent.oclIsUndefined()))then{}else{
				originalContent.compare(targetContent);
		}endif;
	};
	
	var sourceAnnotations:OrderedSet(OclAny)=self.getElementElements();
	var targetAnnotations:OrderedSet(OclAny)=target.getElementElements();
	

	sourceAnnotations->forEach(baseElement){
		var targetElement:OclAny=baseElement.findMatch(targetAnnotations);
		if((targetElement=null)or targetElement.oclIsUndefined())then{
			log('ERROR: failed to match schema source annotation applicationInformation '+baseElement.getElementNamespace()+' : '+baseElement.getElementName());
		}else{}endif;
		
	};
	targetAnnotations->forEach(baseElement){
		var targetElement:OclAny=baseElement.findMatch(sourceAnnotations);
		if(((targetElement=null)or targetElement.oclIsUndefined()))then{
			if(IGNORE_IRRELEVANT_MISMATCH)then{}else{
			log('ERROR: failed to match schema target annotation applicationInformation '+baseElement.repr());
			}endif;
		}else{}endif;
	};
	sourceAnnotations->forEach(originalContent){
		var targetContent:OclAny=originalContent.findMatch(targetAnnotations);
		if(((targetContent=null)or targetContent.oclIsUndefined()))then{}else{
				originalContent.compare(targetContent);
		}endif;
	};
	
	return;
}
	
helper 	XSD::XSDImport::compare(targetIn:XSD::XSDConcreteComponent){
	var target:XSD::XSDImport=targetIn.oclAsType(XSD::XSDImport);
	if(self.namespace<>target.namespace)then{
		log('ERROR: namespace mismatch for Import '+self.namespace+' ? '+target.namespace);
	}else{}endif;
	if(self.annotation.oclIsUndefined() and target.annotation.oclIsUndefined())then{
	}else{
		if(self.annotation.oclIsUndefined() or target.annotation.oclIsUndefined())then{
			log('ERROR: annotation mismatch for Import '+if(self.annotation.oclIsUndefined())then 'UNDEFINED' else self.annotation.getQualifiedName() endif+' ? '+target.annotation.getQualifiedName());
		}else{
			self.annotation.compare(target.annotation);
		}endif;
	}endif;
	if(self.resolvedSchema.targetNamespace<>target.resolvedSchema.targetNamespace)then{
		log('ERROR: resolved schema mismatch for Import '+self.resolvedSchema.targetNamespace+' ? '+target.resolvedSchema.targetNamespace);
	}else{}endif;
}
	
query WSDL::WSDLElement::isTargetIgnored():Boolean {
	// 
	return false;
}
query WSDL::Namespace::isTargetIgnored():Boolean {
	// 
	return false;
}
	
query WSDL::WSDLElement::isSourceIgnored():Boolean {
	// 
	return false;
}
query WSDL::Namespace::isSourceIgnored():Boolean {
	// 
	return false;
}
	
query OclAny::getQualifiedName():String{
	return self.repr();
}

query WSDL::ExtensibleElement::getQualifiedName():String{
	return '('+self.metaClassName()+')'+self.getBaseQualifiedName();
}
	
query WSDL::ExtensibleElement::getBaseQualifiedName():String{
	return self.oclAsType(CMOF::EObject).eContainer().getBaseQualifiedName()+'::['+self.metaClassName()+']';
}
query CMOF::EObject::getBaseQualifiedName():String{
	return 'UNKNOWN';
}
	
query WSDL::Definition::getBaseQualifiedName():String{
	return self.targetNamespace;
}
query WSDL::Binding::getBaseQualifiedName():String{
	return self.qName.repr();
}
query WSDL::BindingFault::getBaseQualifiedName():String{
	return self.name;
}
query WSDL::BindingInput::getBaseQualifiedName():String{
	return self.name;
}
query WSDL::BindingOperation::getBaseQualifiedName():String{
	return self.name;
}
query WSDL::BindingOutput::getBaseQualifiedName():String{
	return self.name;
}
query WSDL::Port::getBaseQualifiedName():String{
	return self.name;
}
query WSDL::Service::getBaseQualifiedName():String{
	return self.qName.repr();
}
query WSDL::Types::getBaseQualifiedName():String{
	return 'types';
}


/*	

helper 	CAT::CatalogType::getAllSchemas():Set(XSD::XSDSchema)
{
	var allSchemas:Set(XSD::XSDSchema)=Set{};
	self.artifact->select(f|f.oclIsKindOf(CAT::FileType)).oclAsType(CAT::FileType).getAllSchemas()->forEach(file){
			allSchemas+=file;
	};
	self.artifact->select(f|f.oclIsKindOf(CAT::FileSetType)).oclAsType(CAT::FileSetType).file.getAllSchemas()->forEach(file){
			allSchemas+=file;
	};
	return allSchemas;
}

helper 	CAT::FileType::getAllSchemas():Set(XSD::XSDSchema)
{
	var allSchemas:Set(XSD::XSDSchema)=Set{};
	if(self.relativePathName.endsWith('.xsd'))then{
		// load and process the schema at the relative location
		var schema:XSD::XSDSchema=self.oclAsType(CMOF::EObject).getSchemaAtRelativeURI(self.relativePathName).oclAsType(XSD::XSDSchema);
		if(schema.oclIsUndefined())then{
			log('ERROR: failed to load schema at '+self.relativePathName);	
		}else{
			schema.getAllSchemas(Set{})->forEach(aSchema){
				allSchemas+=aSchema;
			};
		}endif;
	}else{
	}endif;
	return allSchemas;
}
helper 	XSD::XSDSchema::getAllSchemas(didThat:Set(XSD::XSDSchema)):Set(XSD::XSDSchema)
{
	if(didThat->includes(self))then{return Set{};}else{}endif;
	var allSchemas:Set(XSD::XSDSchema)=Set{self};
	//log('schema '+self.targetNamespace+', '+self.schemaForSchema.targetNamespace);
	self.contents->select(c|c.oclIsKindOf(XSD::XSDSchemaDirective)).oclAsType(XSD::XSDSchemaDirective)
		->forEach(schemaDirective){
			if(schemaDirective.oclIsKindOf(xsd::XSDImport))then{
				schemaDirective.oclAsType(xsd::XSDImport).importSchema();
			}else{}endif;
			if((schemaDirective.resolvedSchema=null)or schemaDirective.resolvedSchema.oclIsUndefined())then{
				log('schemaDirective unresolved '+schemaDirective.schemaLocation+' from '+self.schemaLocation);
			}else{
				allSchemas+=schemaDirective.resolvedSchema.getAllSchemas(allSchemas->union(didThat));
			}endif;
		};
	return allSchemas;
}
*/